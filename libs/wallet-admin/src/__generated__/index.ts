// Code generated by @vegaprotocol/jsonrpc-generator@0.0.1. DO NOT EDIT.

export namespace WalletModel {
  export type UpdatePassphraseResult = null
  export type ListWalletsParams = []
  export type RenameWalletResult = null
  export type RemoveWalletResult = null
  export type ListNetworksParams = []
  export type UpdateNetworkResult = null
  export type RemoveNetworkResult = null
  /**
   * The Vega public key to use.
   */
  export type PublicKey = string
  export type TaintKeyResult = null
  export type UntaintKeyResult = null
  export type RevokePermissionsResult = null
  export type PurgePermissionsResult = null
  /**
   * The chosen mode to send the transaction:
   * - `TYPE_SYNC` returns the result of running the transaction.
   * - `TYPE_ASYNC` returns right away without waiting to hear if the transaction is even valid.
   * - `TYPE_COMMIT` waits until the transaction is committed in a block, or until some timeout is reached, or returns return right away if the transaction is not valid.
   */
  export type SendingMode = 'TYPE_SYNC' | 'TYPE_ASYNC' | 'TYPE_COMMIT'
  export type StartServiceResult = null
  export type StopServiceResult = null
  export type CloseConnectionResult = null
  export type CloseConnectionsToHostnameResult = null
  export type CloseConnectionsToWalletResult = null

  export interface Methods {
    CreateWalletResult?: CreateWalletResult
    CreateWalletParams?: CreateWalletParams
    ImportWalletResult?: ImportWalletResult
    ImportWalletParams?: ImportWalletParams
    UpdatePassphraseResult?: UpdatePassphraseResult
    UpdatePassphraseParams?: UpdatePassphraseParams
    DescribeWalletResult?: DescribeWalletResult
    DescribeWalletParams?: DescribeWalletParams
    ListWalletsResult?: ListWalletsResult
    ListWalletsParams?: ListWalletsParams
    RenameWalletResult?: RenameWalletResult
    RenameWalletParams?: RenameWalletParams
    RemoveWalletResult?: RemoveWalletResult
    RemoveWalletParams?: RemoveWalletParams
    ListNetworksResult?: ListNetworksResult
    ListNetworksParams?: ListNetworksParams
    DescribeNetworkResult?: DescribeNetworkResult
    DescribeNetworkParams?: DescribeNetworkParams
    UpdateNetworkResult?: UpdateNetworkResult
    UpdateNetworkParams?: UpdateNetworkParams
    RemoveNetworkResult?: RemoveNetworkResult
    RemoveNetworkParams?: RemoveNetworkParams
    ImportNetworkResult?: ImportNetworkResult
    ImportNetworkParams?: ImportNetworkParams
    GenerateKeyResult?: GenerateKeyResult
    GenerateKeyParams?: GenerateKeyParams
    DescribeKeyResult?: DescribeKeyResult
    DescribeKeyParams?: DescribeKeyParams
    ListKeysResult?: ListKeysResult
    ListKeysParams?: ListKeysParams
    AnnotateKeyResult?: AnnotateKeyResult
    AnnotateKeyParams?: AnnotateKeyParams
    IsolateKeyResult?: IsolateKeyResult
    IsolateKeyParams?: IsolateKeyParams
    RotateKeyResult?: RotateKeyResult
    RotateKeyParams?: RotateKeyParams
    TaintKeyResult?: TaintKeyResult
    TaintKeyParams?: TaintKeyParams
    UntaintKeyResult?: UntaintKeyResult
    UntaintKeyParams?: UntaintKeyParams
    DescribePermissionsResult?: DescribePermissionsResult
    DescribePermissionsParams?: DescribePermissionsParams
    ListPermissionsResult?: ListPermissionsResult
    ListPermissionsParams?: ListPermissionsParams
    UpdatePermissionsResult?: UpdatePermissionsResult
    UpdatePermissionsParams?: UpdatePermissionsParams
    RevokePermissionsResult?: RevokePermissionsResult
    RevokePermissionsParams?: RevokePermissionsParams
    PurgePermissionsResult?: PurgePermissionsResult
    PurgePermissionsParams?: PurgePermissionsParams
    SignTransactionResult?: SignTransactionResult
    SignTransactionParams?: SignTransactionParams
    SignMessageResult?: SignMessageResult
    SignMessageParams?: SignMessageParams
    VerifyMessageResult?: VerifyMessageResult
    VerifyMessageParams?: VerifyMessageParams
    SendTransactionResult?: SendTransactionResult
    SendTransactionParams?: SendTransactionParams
    SendRawTransactionResult?: SendRawTransactionResult
    SendRawTransactionParams?: SendRawTransactionParams
    StartServiceResult?: StartServiceResult
    StartServiceParams?: StartServiceParams
    StopServiceResult?: StopServiceResult
    StopServiceParams?: StopServiceParams
    ListConnectionsResult?: ListConnectionsResult
    ListConnectionsParams?: ListConnectionsParams
    CloseConnectionResult?: CloseConnectionResult
    CloseConnectionParams?: CloseConnectionParams
    CloseConnectionsToHostnameResult?: CloseConnectionsToHostnameResult
    CloseConnectionsToHostnameParams?: CloseConnectionsToHostnameParams
    CloseConnectionsToWalletResult?: CloseConnectionsToWalletResult
    CloseConnectionsToWalletParams?: CloseConnectionsToWalletParams
  }
  export interface CreateWalletResult {
    /**
     * the newly generated wallet
     */
    wallet: {
      name: string
      keyDerivationVersion: number
      recoveryPhrase: string
      filePath: string
    }
    /**
     * the first public key generated
     */
    key: {
      /**
       * The Vega public key to use.
       */
      publicKey: string
      /**
       * The algorithm used to generate the key.
       */
      algorithm: {
        name: string
        version: number
      }
      metadata: {
        key: string
        value: string
      }[]
    }
  }
  export interface CreateWalletParams {
    wallet: string
    passphrase: string
  }
  export interface ImportWalletResult {
    /**
     * the imported wallet
     */
    wallet: {
      name: string
      keyDerivationVersion: number
      filePath: string
    }
    /**
     * the first public key generated
     */
    key: {
      /**
       * The Vega public key to use.
       */
      publicKey: string
      /**
       * The algorithm used to generate the key.
       */
      algorithm: {
        name: string
        version: number
      }
      metadata: {
        key: string
        value: string
      }[]
    }
  }
  export interface ImportWalletParams {
    wallet: string
    passphrase: string
    recoveryPhrase: string
    keyDerivationVersion: number
  }
  export interface UpdatePassphraseParams {
    wallet: string
    passphrase: string
    newPassphrase: string
  }
  export interface DescribeWalletResult {
    name: string
    keyDerivationVersion: number
    id: string
    type: string
  }
  export interface DescribeWalletParams {
    wallet: string
    passphrase: string
  }
  export interface ListWalletsResult {
    wallets: string[]
  }
  export interface RenameWalletParams {
    wallet: string
    newName: string
    passphrase: string
  }
  export interface RemoveWalletParams {
    wallet: string
  }
  export interface ListNetworksResult {
    networks: string[]
  }
  export interface DescribeNetworkResult {
    name: string
    logLevel: string
    tokenExpiry: string
    port: number
    host: string
    /**
     * The API configuration for the network.
     */
    api: {
      grpcConfig: {
        hosts: string[]
        retries: number
      }
      graphQLConfig: {
        hosts: string[]
      }
      restConfig: {
        hosts: string[]
      }
    }
  }
  export interface DescribeNetworkParams {
    name: string
  }
  export interface UpdateNetworkParams {
    name: string
    logLevel: string
    tokenExpiry: string
    port: number
    host: string
    api: NetworkApiConfig
  }
  /**
   * The API configuration for the network.
   */
  export interface NetworkApiConfig {
    grpcConfig: {
      hosts: string[]
      retries: number
    }
    graphQLConfig: {
      hosts: string[]
    }
    restConfig: {
      hosts: string[]
    }
  }
  export interface RemoveNetworkParams {
    name: string
  }
  export interface ImportNetworkResult {
    name: string
    filePath: string
  }
  export interface ImportNetworkParams {
    name?: string
    filePath: string
    url: string
    overwrite: boolean
  }
  export interface GenerateKeyResult {
    /**
     * The Vega public key to use.
     */
    publicKey: string
    /**
     * The algorithm used to generate the key.
     */
    algorithm: {
      name: string
      version: number
    }
    metadata: {
      key: string
      value: string
    }[]
  }
  export interface GenerateKeyParams {
    wallet: string
    passphrase: string
    metadata: {
      key: string
      value: string
    }[]
  }
  export interface DescribeKeyResult {
    /**
     * The Vega public key to use.
     */
    publicKey: string
    /**
     * The algorithm used to generate the key.
     */
    algorithm: {
      name: string
      version: number
    }
    metadata: {
      key: string
      value: string
    }[]
    /**
     * Tells if the key is tainted or not. A tainted key cannot be used for signing and sending transaction, for example.
     */
    isTainted: boolean
  }
  export interface DescribeKeyParams {
    wallet: string
    passphrase: string
    publicKey: PublicKey
  }
  export interface ListKeysResult {
    keys: {
      name: string
      publicKey: string
    }[]
  }
  export interface ListKeysParams {
    wallet: string
    passphrase: string
  }
  export interface AnnotateKeyResult {
    metadata: {
      key: string
      value: string
    }[]
  }
  export interface AnnotateKeyParams {
    wallet: string
    passphrase: string
    publicKey: PublicKey
    metadata: {
      key: string
      value: string
    }[]
  }
  export interface IsolateKeyResult {
    /**
     * Name of the generated isolated wallet
     */
    wallet: string
    /**
     * Path to the isolated wallet file
     */
    filePath: string
  }
  export interface IsolateKeyParams {
    wallet: string
    passphrase: string
    isolatedWalletPassphrase: string
    publicKey: PublicKey
  }
  export interface RotateKeyResult {
    /**
     * The master public key of the wallet used to sign the transaction
     */
    masterPublicKey: string
    /**
     * The base64-encoded key rotation transaction
     */
    encodedTransaction: string
  }
  export interface RotateKeyParams {
    wallet: string
    passphrase: string
    /**
     * The current public key
     */
    fromPublicKey: string
    /**
     * The next public key to rotate to
     */
    toPublicKey: string
    /**
     * The chain identifier
     */
    chainID: string
    /**
     * The block height (approximation) at which the transaction will be submitted
     */
    submissionBlockHeight: string
    /**
     * The block height at which the rotation should happen
     */
    enactmentBlockHeight: string
  }
  export interface TaintKeyParams {
    wallet: string
    passphrase: string
    publicKey: PublicKey
  }
  export interface UntaintKeyParams {
    wallet: string
    passphrase: string
    publicKey: PublicKey
  }
  export interface DescribePermissionsResult {
    /**
     * The full description of the permissions a third-party application has.
     */
    permissions: {
      /**
       * The permissions related to public keys.
       */
      publicKeys: {
        /**
         * The different access modes a permission can have.
         */
        access: 'read' | 'none'
        /**
         * The subset of public keys the user selected for this hostname. If empty, the wallet assumes all keys are accessible.
         */
        allowedKeys: string[]
      }
    }
  }
  export interface DescribePermissionsParams {
    wallet: string
    passphrase: string
    hostname: string
  }
  export interface ListPermissionsResult {
    permissions: {
      /**
       * The description of the permissions a third-party application has.
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` ".".
       */
      [k: string]: {
        /**
         * The different access modes a permission can have.
         */
        public_keys: 'read' | 'none'
      }
    }
  }
  export interface ListPermissionsParams {
    wallet: string
    passphrase: string
  }
  export interface UpdatePermissionsResult {
    /**
     * The full description of the permissions a third-party application has.
     */
    permissions: {
      /**
       * The permissions related to public keys.
       */
      publicKeys: {
        /**
         * The different access modes a permission can have.
         */
        access: 'read' | 'none'
        /**
         * The subset of public keys the user selected for this hostname. If empty, the wallet assumes all keys are accessible.
         */
        allowedKeys: string[]
      }
    }
  }
  export interface UpdatePermissionsParams {
    wallet: string
    passphrase: string
    hostname: string
    permissions: Permissions
  }
  /**
   * The full description of the permissions a third-party application has.
   */
  export interface Permissions {
    /**
     * The permissions related to public keys.
     */
    publicKeys: {
      /**
       * The different access modes a permission can have.
       */
      access: 'read' | 'none'
      /**
       * The subset of public keys the user selected for this hostname. If empty, the wallet assumes all keys are accessible.
       */
      allowedKeys: string[]
    }
  }
  export interface RevokePermissionsParams {
    wallet: string
    passphrase: string
    hostname: string
  }
  export interface PurgePermissionsParams {
    wallet: string
    passphrase: string
  }
  export interface SignTransactionResult {
    encodedTransaction: string
  }
  export interface SignTransactionParams {
    wallet: string
    passphrase: string
    pubKey: string
    chainId: string
    blockHeight: number
    network?: number
    transaction: Transaction
  }
  /**
   * The transaction as a JSON object
   */
  export interface Transaction {}
  export interface SignMessageResult {
    encodedSignature: string
  }
  export interface SignMessageParams {
    wallet: string
    passphrase: string
    pubKey: string
    /**
     * The message to sign encoded using base-64.
     */
    encodedMessage: string
  }
  export interface VerifyMessageResult {
    isValid: string
  }
  export interface VerifyMessageParams {
    pubKey: string
    /**
     * The message use to create the signature, encoded using base-64.
     */
    encodedMessage: string
    /**
     * The signature to verify, encoded using base-64.
     */
    encodedSignature: string
  }
  export interface SendTransactionResult {
    /**
     * The date when the API received the request to send the transaction.
     *
     * The time is a quoted string in RFC 3339 format, with sub-second precision added if present.
     */
    receivedAt: string
    /**
     * The date when the transaction has been sent to the network.
     *
     * The time is a quoted string in RFC 3339 format, with sub-second precision added if present.
     */
    sentAt: string
    /**
     * The hash of the transaction. It's used to uniquely identify the transaction and can be used in the block explorer to retrieve it.
     */
    transactionHash: string
    /**
     * A transaction that has been signed by the wallet.
     */
    transaction: {
      inputData: string
      signature: {
        value: string
        algo: string
        version: number
      }
      from: {
        publicKey?: string
        address?: string
      }
      version: number
      pow: {
        tid: string
        nonce: number
      }
    }
  }
  export interface SendTransactionParams {
    wallet: string
    passphrase: string
    pubKey: string
    network?: number
    sendingMode: SendingMode
    transaction: Transaction1
  }
  /**
   * The transaction as a JSON object
   */
  export interface Transaction1 {}
  export interface SendRawTransactionResult {
    /**
     * The date when the API received the request to send the transaction.
     *
     * The time is a quoted string in RFC 3339 format, with sub-second precision added if present.
     */
    receivedAt: string
    /**
     * The date when the transaction has been sent to the network.
     *
     * The time is a quoted string in RFC 3339 format, with sub-second precision added if present.
     */
    sentAt: string
    /**
     * The hash of the transaction. It's used to uniquely identify the transaction and can be used in the block explorer to retrieve it.
     */
    transactionHash: string
    /**
     * A transaction that has been signed by the wallet.
     */
    transaction: {
      inputData: string
      signature: {
        value: string
        algo: string
        version: number
      }
      from: {
        publicKey?: string
        address?: string
      }
      version: number
      pow: {
        tid: string
        nonce: number
      }
    }
  }
  export interface SendRawTransactionParams {
    /**
     * The signed transaction to be sent, encoded using base-64.
     */
    encodedTransaction: string
    /**
     * The network to send the transaction to.
     */
    network: string
    /**
     * The node address to send the transaction to.
     */
    nodeAddress: string
    /**
     * the number of times sending the transaction should be attempted if it fails
     */
    retries: number
    sendingMode: SendingMode
  }
  export interface StartServiceParams {
    network: string
    noVersionCheck: boolean
  }
  export interface StopServiceParams {
    network: string
  }
  export interface ListConnectionsResult {
    /**
     * The list is sorted by hostname, then by wallet name.
     */
    activeConnections: {
      hostname: string
      wallet: string
    }[]
  }
  export interface ListConnectionsParams {}
  export interface CloseConnectionParams {
    hostname: string
    wallet: string
  }
  export interface CloseConnectionsToHostnameParams {
    hostname: string
  }
  export interface CloseConnectionsToWalletParams {
    wallet: string
  }
}

export enum Identifier {
  CreateWallet = 'admin.create_wallet',
  ImportWallet = 'admin.import_wallet',
  UpdatePassphrase = 'admin.update_passphrase',
  DescribeWallet = 'admin.describe_wallet',
  ListWallets = 'admin.list_wallets',
  RenameWallet = 'admin.rename_wallet',
  RemoveWallet = 'admin.remove_wallet',
  ListNetworks = 'admin.list_networks',
  DescribeNetwork = 'admin.describe_network',
  UpdateNetwork = 'admin.update_network',
  RemoveNetwork = 'admin.remove_network',
  ImportNetwork = 'admin.import_network',
  GenerateKey = 'admin.generate_key',
  DescribeKey = 'admin.describe_key',
  ListKeys = 'admin.list_keys',
  AnnotateKey = 'admin.annotate_key',
  IsolateKey = 'admin.isolate_key',
  RotateKey = 'admin.rotate_key',
  TaintKey = 'admin.taint_key',
  UntaintKey = 'admin.untaint_key',
  DescribePermissions = 'admin.describe_permissions',
  ListPermissions = 'admin.list_permissions',
  UpdatePermissions = 'admin.update_permissions',
  RevokePermissions = 'admin.revoke_permissions',
  PurgePermissions = 'admin.purge_permissions',
  SignTransaction = 'admin.sign_transaction',
  SignMessage = 'admin.sign_message',
  VerifyMessage = 'admin.verify_message',
  SendTransaction = 'admin.send_transaction',
  SendRawTransaction = 'admin.send_raw_transaction',
  StartService = 'admin.start_service',
  StopService = 'admin.stop_service',
  ListConnections = 'admin.list_connections',
  CloseConnection = 'admin.close_connection',
  CloseConnectionsToHostname = 'admin.close_connections_to_hostname',
  CloseConnectionsToWallet = 'admin.close_connections_to_wallet',
}

export type WalletAPIRequest = ((
  id: Identifier.CreateWallet,
  params: WalletModel.CreateWalletParams
) => Promise<WalletModel.CreateWalletResult>) &
  ((
    id: Identifier.ImportWallet,
    params: WalletModel.ImportWalletParams
  ) => Promise<WalletModel.ImportWalletResult>) &
  ((
    id: Identifier.UpdatePassphrase,
    params: WalletModel.UpdatePassphraseParams
  ) => Promise<WalletModel.UpdatePassphraseResult>) &
  ((
    id: Identifier.DescribeWallet,
    params: WalletModel.DescribeWalletParams
  ) => Promise<WalletModel.DescribeWalletResult>) &
  ((
    id: Identifier.ListWallets,
    params: WalletModel.ListWalletsParams
  ) => Promise<WalletModel.ListWalletsResult>) &
  ((
    id: Identifier.RenameWallet,
    params: WalletModel.RenameWalletParams
  ) => Promise<WalletModel.RenameWalletResult>) &
  ((
    id: Identifier.RemoveWallet,
    params: WalletModel.RemoveWalletParams
  ) => Promise<WalletModel.RemoveWalletResult>) &
  ((
    id: Identifier.ListNetworks,
    params: WalletModel.ListNetworksParams
  ) => Promise<WalletModel.ListNetworksResult>) &
  ((
    id: Identifier.DescribeNetwork,
    params: WalletModel.DescribeNetworkParams
  ) => Promise<WalletModel.DescribeNetworkResult>) &
  ((
    id: Identifier.UpdateNetwork,
    params: WalletModel.UpdateNetworkParams
  ) => Promise<WalletModel.UpdateNetworkResult>) &
  ((
    id: Identifier.RemoveNetwork,
    params: WalletModel.RemoveNetworkParams
  ) => Promise<WalletModel.RemoveNetworkResult>) &
  ((
    id: Identifier.ImportNetwork,
    params: WalletModel.ImportNetworkParams
  ) => Promise<WalletModel.ImportNetworkResult>) &
  ((
    id: Identifier.GenerateKey,
    params: WalletModel.GenerateKeyParams
  ) => Promise<WalletModel.GenerateKeyResult>) &
  ((
    id: Identifier.DescribeKey,
    params: WalletModel.DescribeKeyParams
  ) => Promise<WalletModel.DescribeKeyResult>) &
  ((
    id: Identifier.ListKeys,
    params: WalletModel.ListKeysParams
  ) => Promise<WalletModel.ListKeysResult>) &
  ((
    id: Identifier.AnnotateKey,
    params: WalletModel.AnnotateKeyParams
  ) => Promise<WalletModel.AnnotateKeyResult>) &
  ((
    id: Identifier.IsolateKey,
    params: WalletModel.IsolateKeyParams
  ) => Promise<WalletModel.IsolateKeyResult>) &
  ((
    id: Identifier.RotateKey,
    params: WalletModel.RotateKeyParams
  ) => Promise<WalletModel.RotateKeyResult>) &
  ((
    id: Identifier.TaintKey,
    params: WalletModel.TaintKeyParams
  ) => Promise<WalletModel.TaintKeyResult>) &
  ((
    id: Identifier.UntaintKey,
    params: WalletModel.UntaintKeyParams
  ) => Promise<WalletModel.UntaintKeyResult>) &
  ((
    id: Identifier.DescribePermissions,
    params: WalletModel.DescribePermissionsParams
  ) => Promise<WalletModel.DescribePermissionsResult>) &
  ((
    id: Identifier.ListPermissions,
    params: WalletModel.ListPermissionsParams
  ) => Promise<WalletModel.ListPermissionsResult>) &
  ((
    id: Identifier.UpdatePermissions,
    params: WalletModel.UpdatePermissionsParams
  ) => Promise<WalletModel.UpdatePermissionsResult>) &
  ((
    id: Identifier.RevokePermissions,
    params: WalletModel.RevokePermissionsParams
  ) => Promise<WalletModel.RevokePermissionsResult>) &
  ((
    id: Identifier.PurgePermissions,
    params: WalletModel.PurgePermissionsParams
  ) => Promise<WalletModel.PurgePermissionsResult>) &
  ((
    id: Identifier.SignTransaction,
    params: WalletModel.SignTransactionParams
  ) => Promise<WalletModel.SignTransactionResult>) &
  ((
    id: Identifier.SignMessage,
    params: WalletModel.SignMessageParams
  ) => Promise<WalletModel.SignMessageResult>) &
  ((
    id: Identifier.VerifyMessage,
    params: WalletModel.VerifyMessageParams
  ) => Promise<WalletModel.VerifyMessageResult>) &
  ((
    id: Identifier.SendTransaction,
    params: WalletModel.SendTransactionParams
  ) => Promise<WalletModel.SendTransactionResult>) &
  ((
    id: Identifier.SendRawTransaction,
    params: WalletModel.SendRawTransactionParams
  ) => Promise<WalletModel.SendRawTransactionResult>) &
  ((
    id: Identifier.StartService,
    params: WalletModel.StartServiceParams
  ) => Promise<WalletModel.StartServiceResult>) &
  ((
    id: Identifier.StopService,
    params: WalletModel.StopServiceParams
  ) => Promise<WalletModel.StopServiceResult>) &
  ((
    id: Identifier.ListConnections,
    params: WalletModel.ListConnectionsParams
  ) => Promise<WalletModel.ListConnectionsResult>) &
  ((
    id: Identifier.CloseConnection,
    params: WalletModel.CloseConnectionParams
  ) => Promise<WalletModel.CloseConnectionResult>) &
  ((
    id: Identifier.CloseConnectionsToHostname,
    params: WalletModel.CloseConnectionsToHostnameParams
  ) => Promise<WalletModel.CloseConnectionsToHostnameResult>) &
  ((
    id: Identifier.CloseConnectionsToWallet,
    params: WalletModel.CloseConnectionsToWalletParams
  ) => Promise<WalletModel.CloseConnectionsToWalletResult>)

export class WalletAdmin {
  private request: WalletAPIRequest

  constructor(request: WalletAPIRequest) {
    this.request = request
  }

  /**
   * Creates a wallet with its first key-pair.
   */

  // tslint:disable-next-line:max-line-length
  public CreateWallet = (params: WalletModel.CreateWalletParams) => {
    return this.request(Identifier.CreateWallet, params)
  }

  /**
   * Import a wallet with its first key-pair with a recovery phrase and a key derivation version.
   */

  // tslint:disable-next-line:max-line-length
  public ImportWallet = (params: WalletModel.ImportWalletParams) => {
    return this.request(Identifier.ImportWallet, params)
  }

  /**
   * Change the passphrase of the specified wallet.
   */

  // tslint:disable-next-line:max-line-length
  public UpdatePassphrase = (params: WalletModel.UpdatePassphraseParams) => {
    return this.request(Identifier.UpdatePassphrase, params)
  }

  /**
   * Returns the wallet base information.
   */

  // tslint:disable-next-line:max-line-length
  public DescribeWallet = (params: WalletModel.DescribeWalletParams) => {
    return this.request(Identifier.DescribeWallet, params)
  }

  /**
   * Returns the list of the wallets present on the computer.
   */

  // tslint:disable-next-line:max-line-length
  public ListWallets = (...params: WalletModel.ListWalletsParams) => {
    return this.request(Identifier.ListWallets, params)
  }

  /**
   * Renames a wallet
   */

  // tslint:disable-next-line:max-line-length
  public RenameWallet = (params: WalletModel.RenameWalletParams) => {
    return this.request(Identifier.RenameWallet, params)
  }

  /**
   * Removes a wallet from the computer.
   */

  // tslint:disable-next-line:max-line-length
  public RemoveWallet = (params: WalletModel.RemoveWalletParams) => {
    return this.request(Identifier.RemoveWallet, params)
  }

  /**
   * Returns the list of all registered networks.
   */

  // tslint:disable-next-line:max-line-length
  public ListNetworks = (...params: WalletModel.ListNetworksParams) => {
    return this.request(Identifier.ListNetworks, params)
  }

  /**
   * Returns the network information.
   */

  // tslint:disable-next-line:max-line-length
  public DescribeNetwork = (params: WalletModel.DescribeNetworkParams) => {
    return this.request(Identifier.DescribeNetwork, params)
  }

  /**
   * Update an existing network.
   */

  // tslint:disable-next-line:max-line-length
  public UpdateNetwork = (params: WalletModel.UpdateNetworkParams) => {
    return this.request(Identifier.UpdateNetwork, params)
  }

  /**
   * Removes a network from the computer.
   */

  // tslint:disable-next-line:max-line-length
  public RemoveNetwork = (params: WalletModel.RemoveNetworkParams) => {
    return this.request(Identifier.RemoveNetwork, params)
  }

  /**
   * Import a network configuration from a file or an URL.
   */

  // tslint:disable-next-line:max-line-length
  public ImportNetwork = (params: WalletModel.ImportNetworkParams) => {
    return this.request(Identifier.ImportNetwork, params)
  }

  /**
   * Generates a key on the specified wallet.
   */

  // tslint:disable-next-line:max-line-length
  public GenerateKey = (params: WalletModel.GenerateKeyParams) => {
    return this.request(Identifier.GenerateKey, params)
  }

  /**
   * Returns key's information.
   */

  // tslint:disable-next-line:max-line-length
  public DescribeKey = (params: WalletModel.DescribeKeyParams) => {
    return this.request(Identifier.DescribeKey, params)
  }

  /**
   * Returns all generated key of the specified wallet.
   */

  // tslint:disable-next-line:max-line-length
  public ListKeys = (params: WalletModel.ListKeysParams) => {
    return this.request(Identifier.ListKeys, params)
  }

  /**
   * Attaches metadata to a key.
   */

  // tslint:disable-next-line:max-line-length
  public AnnotateKey = (params: WalletModel.AnnotateKeyParams) => {
    return this.request(Identifier.AnnotateKey, params)
  }

  /**
   * Isolate a key to a specific wallet.
   */

  // tslint:disable-next-line:max-line-length
  public IsolateKey = (params: WalletModel.IsolateKeyParams) => {
    return this.request(Identifier.IsolateKey, params)
  }

  /**
   * Builds a transaction to rotate key on the network.
   */

  // tslint:disable-next-line:max-line-length
  public RotateKey = (params: WalletModel.RotateKeyParams) => {
    return this.request(Identifier.RotateKey, params)
  }

  /**
   * Marks the specified public key as tainted.
   */

  // tslint:disable-next-line:max-line-length
  public TaintKey = (params: WalletModel.TaintKeyParams) => {
    return this.request(Identifier.TaintKey, params)
  }

  /**
   * Remove the taint from the specified public key.
   */

  // tslint:disable-next-line:max-line-length
  public UntaintKey = (params: WalletModel.UntaintKeyParams) => {
    return this.request(Identifier.UntaintKey, params)
  }

  /**
   * Returns the permissions set for the specified wallet and hostname.
   */

  // tslint:disable-next-line:max-line-length
  public DescribePermissions = (
    params: WalletModel.DescribePermissionsParams
  ) => {
    return this.request(Identifier.DescribePermissions, params)
  }

  /**
   * Returns the permissions summary for all set hostnames.
   */

  // tslint:disable-next-line:max-line-length
  public ListPermissions = (params: WalletModel.ListPermissionsParams) => {
    return this.request(Identifier.ListPermissions, params)
  }

  /**
   * Updates the permissions for the specified wallet and hostname.
   */

  // tslint:disable-next-line:max-line-length
  public UpdatePermissions = (params: WalletModel.UpdatePermissionsParams) => {
    return this.request(Identifier.UpdatePermissions, params)
  }

  /**
   * Revokes the permissions set in the specified hostname.
   */

  // tslint:disable-next-line:max-line-length
  public RevokePermissions = (params: WalletModel.RevokePermissionsParams) => {
    return this.request(Identifier.RevokePermissions, params)
  }

  /**
   * Purges all the permissions set for all hostname.
   */

  // tslint:disable-next-line:max-line-length
  public PurgePermissions = (params: WalletModel.PurgePermissionsParams) => {
    return this.request(Identifier.PurgePermissions, params)
  }

  /**
   * Sign a command using the specified wallet and public key.
   */

  // tslint:disable-next-line:max-line-length
  public SignTransaction = (params: WalletModel.SignTransactionParams) => {
    return this.request(Identifier.SignTransaction, params)
  }

  /**
   * Sign any arbitrary message
   */

  // tslint:disable-next-line:max-line-length
  public SignMessage = (params: WalletModel.SignMessageParams) => {
    return this.request(Identifier.SignMessage, params)
  }

  /**
   * Verify any arbitrary signature
   */

  // tslint:disable-next-line:max-line-length
  public VerifyMessage = (params: WalletModel.VerifyMessageParams) => {
    return this.request(Identifier.VerifyMessage, params)
  }

  /**
   * Sign & send a transaction to a network
   */

  // tslint:disable-next-line:max-line-length
  public SendTransaction = (params: WalletModel.SendTransactionParams) => {
    return this.request(Identifier.SendTransaction, params)
  }

  /**
   * Send a signed transaction to a network
   */

  // tslint:disable-next-line:max-line-length
  public SendRawTransaction = (
    params: WalletModel.SendRawTransactionParams
  ) => {
    return this.request(Identifier.SendRawTransaction, params)
  }

  /**
   * Start a wallet service.
   */

  // tslint:disable-next-line:max-line-length
  public StartService = (params: WalletModel.StartServiceParams) => {
    return this.request(Identifier.StartService, params)
  }

  /**
   * Stop a wallet service.
   */

  // tslint:disable-next-line:max-line-length
  public StopService = (params: WalletModel.StopServiceParams) => {
    return this.request(Identifier.StopService, params)
  }

  /**
   * List all the connections of a service.
   */

  // tslint:disable-next-line:max-line-length
  public ListConnections = (params: WalletModel.ListConnectionsParams) => {
    return this.request(Identifier.ListConnections, params)
  }

  /**
   * Close the connection between a third-party application and a wallet.
   */

  // tslint:disable-next-line:max-line-length
  public CloseConnection = (params: WalletModel.CloseConnectionParams) => {
    return this.request(Identifier.CloseConnection, params)
  }

  /**
   * Close the connection from the specified third-party application to any wallet.
   */

  // tslint:disable-next-line:max-line-length
  public CloseConnectionsToHostname = (
    params: WalletModel.CloseConnectionsToHostnameParams
  ) => {
    return this.request(Identifier.CloseConnectionsToHostname, params)
  }

  /**
   * Close the connection from any third-party application to the specified wallet.
   */

  // tslint:disable-next-line:max-line-length
  public CloseConnectionsToWallet = (
    params: WalletModel.CloseConnectionsToWalletParams
  ) => {
    return this.request(Identifier.CloseConnectionsToWallet, params)
  }
}
