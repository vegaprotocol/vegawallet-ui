// Code generated by @vegaprotocol/jsonrpc-generator@0.0.1. DO NOT EDIT.
import type { WalletModel } from './'
import { Identifier } from './'

export function MockAPIRequest(
  id: Identifier.CreateWallet,
  params: WalletModel.CreateWalletParams
): Promise<WalletModel.CreateWalletResult>
export function MockAPIRequest(
  id: Identifier.ImportWallet,
  params: WalletModel.ImportWalletParams
): Promise<WalletModel.ImportWalletResult>
export function MockAPIRequest(
  id: Identifier.DescribeWallet,
  params: WalletModel.DescribeWalletParams
): Promise<WalletModel.DescribeWalletResult>
export function MockAPIRequest(
  id: Identifier.ListWallets,
  params: WalletModel.ListWalletsParams
): Promise<WalletModel.ListWalletsResult>
export function MockAPIRequest(
  id: Identifier.RenameWallet,
  params: WalletModel.RenameWalletParams
): Promise<WalletModel.RenameWalletResult>
export function MockAPIRequest(
  id: Identifier.RemoveWallet,
  params: WalletModel.RemoveWalletParams
): Promise<WalletModel.RemoveWalletResult>
export function MockAPIRequest(
  id: Identifier.ListNetworks,
  params: WalletModel.ListNetworksParams
): Promise<WalletModel.ListNetworksResult>
export function MockAPIRequest(
  id: Identifier.DescribeNetwork,
  params: WalletModel.DescribeNetworkParams
): Promise<WalletModel.DescribeNetworkResult>
export function MockAPIRequest(
  id: Identifier.UpdateNetwork,
  params: WalletModel.UpdateNetworkParams
): Promise<WalletModel.UpdateNetworkResult>
export function MockAPIRequest(
  id: Identifier.RemoveNetwork,
  params: WalletModel.RemoveNetworkParams
): Promise<WalletModel.RemoveNetworkResult>
export function MockAPIRequest(
  id: Identifier.ImportNetwork,
  params: WalletModel.ImportNetworkParams
): Promise<WalletModel.ImportNetworkResult>
export function MockAPIRequest(
  id: Identifier.GenerateKey,
  params: WalletModel.GenerateKeyParams
): Promise<WalletModel.GenerateKeyResult>
export function MockAPIRequest(
  id: Identifier.DescribeKey,
  params: WalletModel.DescribeKeyParams
): Promise<WalletModel.DescribeKeyResult>
export function MockAPIRequest(
  id: Identifier.ListKeys,
  params: WalletModel.ListKeysParams
): Promise<WalletModel.ListKeysResult>
export function MockAPIRequest(
  id: Identifier.AnnotateKey,
  params: WalletModel.AnnotateKeyParams
): Promise<WalletModel.AnnotateKeyResult>
export function MockAPIRequest(
  id: Identifier.TaintKey,
  params: WalletModel.TaintKeyParams
): Promise<WalletModel.TaintKeyResult>
export function MockAPIRequest(
  id: Identifier.UntaintKey,
  params: WalletModel.UntaintKeyParams
): Promise<WalletModel.UntaintKeyResult>
export function MockAPIRequest(
  id: Identifier.DescribePermissions,
  params: WalletModel.DescribePermissionsParams
): Promise<WalletModel.DescribePermissionsResult>
export function MockAPIRequest(
  id: Identifier.ListPermissions,
  params: WalletModel.ListPermissionsParams
): Promise<WalletModel.ListPermissionsResult>
export function MockAPIRequest(
  id: Identifier.UpdatePermissions,
  params: WalletModel.UpdatePermissionsParams
): Promise<WalletModel.UpdatePermissionsResult>
export function MockAPIRequest(
  id: Identifier.SignMessage,
  params: WalletModel.SignMessageParams
): Promise<WalletModel.SignMessageResult>
export function MockAPIRequest(id: Identifier) {
  switch (id) {
    case Identifier.CreateWallet: {
      return Promise.resolve<WalletModel.CreateWalletResult>({
        wallet: {
          name: 'my-wallet',
          keyDerivationVersion: 2,
          recoveryPhrase:
            'swing ceiling chaos green put insane ripple desk match tip melt usual shrug turkey renew icon parade veteran lens govern path rough page render',
          filePath: 'some/path/to/my-wallet',
        },
        key: {
          publicKey:
            'b5fd9d3c4ad553cb3196303b6e6df7f484cf7f5331a572a45031239fd71ad8a0',
          algorithm: {
            name: 'vega/ed25519',
            version: 1,
          },
          metadata: [
            {
              key: 'name',
              value: 'my-wallet key 1',
            },
          ],
        },
      })
    }
    case Identifier.ImportWallet: {
      return Promise.resolve<WalletModel.ImportWalletResult>({
        wallet: {
          name: 'my-wallet',
          keyDerivationVersion: 2,
          filePath: 'some/path/to/my-wallet',
        },
        key: {
          publicKey:
            'b5fd9d3c4ad553cb3196303b6e6df7f484cf7f5331a572a45031239fd71ad8a0',
          algorithm: {
            name: 'vega/ed25519',
            version: 1,
          },
          metadata: [
            {
              key: 'name',
              value: 'my-wallet key 1',
            },
          ],
        },
      })
    }
    case Identifier.DescribeWallet: {
      return Promise.resolve<WalletModel.DescribeWalletResult>({
        name: 'my-wallet',
        keyDerivationVersion: 2,
        type: 'HD Wallet',
        id: '7ffa36b2fb99d8404e9448f0d2ce944055e64c36d895d1fde044c867bfdf779f',
      })
    }
    case Identifier.ListWallets: {
      return Promise.resolve<WalletModel.ListWalletsResult>({
        wallets: ['wallet-1', 'wallet-2'],
      })
    }
    case Identifier.RenameWallet: {
      return Promise.resolve<WalletModel.RenameWalletResult>(null)
    }
    case Identifier.RemoveWallet: {
      return Promise.resolve<WalletModel.RemoveWalletResult>(null)
    }
    case Identifier.ListNetworks: {
      return Promise.resolve<WalletModel.ListNetworksResult>({
        networks: ['mainnet', 'fairground', 'local-network'],
      })
    }
    case Identifier.DescribeNetwork: {
      return Promise.resolve<WalletModel.DescribeNetworkResult>({
        name: 'local-network',
        logLevel: 'info',
        tokenExpiry: '168h0m0s',
        port: 1789,
        host: 'localhost',
        api: {
          grpcConfig: {
            hosts: ['localhost:3028'],
            retries: 5,
          },
          graphQLConfig: {
            hosts: ['localhost:3028'],
          },
          restConfig: {
            hosts: ['localhost:3029'],
          },
        },
      })
    }
    case Identifier.UpdateNetwork: {
      return Promise.resolve<WalletModel.UpdateNetworkResult>(null)
    }
    case Identifier.RemoveNetwork: {
      return Promise.resolve<WalletModel.RemoveNetworkResult>(null)
    }
    case Identifier.ImportNetwork: {
      return Promise.resolve<WalletModel.ImportNetworkResult>({
        name: 'local-network',
        filePath:
          '/Users/username/vega-home/wallet-service/networks/local-network.toml',
      })
    }
    case Identifier.GenerateKey: {
      return Promise.resolve<WalletModel.GenerateKeyResult>({
        publicKey:
          'b5fd9d3c4ad553cb3196303b6e6df7f484cf7f5331a572a45031239fd71ad8a0',
        algorithm: {
          name: 'vega/ed25519',
          version: 1,
        },
        metadata: [
          {
            key: 'portfolio',
            value: 'btc',
          },
          {
            key: 'name',
            value: 'Key 1',
          },
        ],
      })
    }
    case Identifier.DescribeKey: {
      return Promise.resolve<WalletModel.DescribeKeyResult>({
        publicKey:
          'b5fd9d3c4ad553cb3196303b6e6df7f484cf7f5331a572a45031239fd71ad8a0',
        algorithm: {
          name: 'vega/ed25519',
          version: 1,
        },
        metadata: [
          {
            key: 'portfolio',
            value: 'btc',
          },
          {
            key: 'name',
            value: 'Key 1',
          },
        ],
        isTainted: false,
      })
    }
    case Identifier.ListKeys: {
      return Promise.resolve<WalletModel.ListKeysResult>({
        keys: [
          {
            name: 'Key 1',
            publicKey:
              'b5fd9d3c4ad553cb3196303b6e6df7f484cf7f5331a572a45031239fd71ad8a0',
          },
        ],
      })
    }
    case Identifier.AnnotateKey: {
      return Promise.resolve<WalletModel.AnnotateKeyResult>({
        metadata: [
          {
            key: 'portfolio',
            value: 'btc',
          },
          {
            key: 'name',
            value: 'Key 1',
          },
        ],
      })
    }
    case Identifier.TaintKey: {
      return Promise.resolve<WalletModel.TaintKeyResult>(null)
    }
    case Identifier.UntaintKey: {
      return Promise.resolve<WalletModel.UntaintKeyResult>(null)
    }
    case Identifier.DescribePermissions: {
      return Promise.resolve<WalletModel.DescribePermissionsResult>({
        permissions: {
          publicKeys: {
            access: 'read',
            restrictedKeys: [
              'b5fd9d3c4ad553cb3196303b6e6df7f484cf7f5331a572a45031239fd71ad8a0',
            ],
          },
        },
      })
    }
    case Identifier.ListPermissions: {
      return Promise.resolve<WalletModel.ListPermissionsResult>({
        permissions: {
          'vega.xyz': {
            public_keys: 'read',
          },
          'token.vega.xyz': {
            public_keys: 'none',
          },
        },
      })
    }
    case Identifier.UpdatePermissions: {
      return Promise.resolve<WalletModel.UpdatePermissionsResult>({
        permissions: {
          publicKeys: {
            access: 'read',
            restrictedKeys: [
              'b5fd9d3c4ad553cb3196303b6e6df7f484cf7f5331a572a45031239fd71ad8a0',
            ],
          },
        },
      })
    }
    case Identifier.SignMessage: {
      return Promise.resolve<WalletModel.SignMessageResult>({
        encodedSignature:
          '6a2Ud6yuNcnOaO8jaiTJJi8dZBQzvNySV2Tt2hD+YhVnz1dNxHGUavU2a1W1z0/1uX0n91x2jWXONMRpiiNODg==',
      })
    }

    default: {
      return Promise.resolve(null)
    }
  }
}
